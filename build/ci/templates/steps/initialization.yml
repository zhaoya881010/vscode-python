# -----------------------------------------------------------------------------------------------------------------------------
# Overview:
# -----------------------------------------------------------------------------------------------------------------------------
# Set of common steps required when initializing a job.
#
# -----------------------------------------------------------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------------------------------------------------------
# 1. workingDirectory
#   Mandatory
#   Working directory.
# 2. PythonVersion
#   Python version to be used.
#   If not provided, python will not be setup on CI.
parameters:
  workingDirectory: ''
  PythonVersion: ''
  compile: 'true'
  sqlite: 'false'
  installVSCEorNPX: 'true'

steps:
  - bash: |
      printenv
    displayName: 'Show all env vars'
    condition: eq(variables['system.debug'], 'true')

  - task: NodeTool@0
    displayName: 'Use Node $(NodeVersion)'
    inputs:
      versionSpec: $(NodeVersion)

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.PythonVersion }}'
    condition: and(succeeded(), not(eq('${{ parameters.PythonVersion }}', '')))
    inputs:
      versionSpec: ${{ parameters.PythonVersion }}

  # Install the a version of python that works with sqlite3 until this bug is addressed
  # https://mseng.visualstudio.com/AzureDevOps/_workitems/edit/1535830
  #
  # This task will only run if variable `NeedsPythonFunctionalReqs` is true.
  - bash: |
      sudo apt-get update
      sudo apt-get install libsqlite3-dev
      version=$(python -V 2>&1 | grep -Po '(?<=Python )(.+)')
      wget https://www.python.org/ftp/python/$version/Python-$version.tar.xz
      tar xvf Python-$version.tar.xz
      cd Python-$version
      ./configure --enable-loadable-sqlite-extensions --with-ensurepip=install --prefix=$HOME/py-$version
      make
      sudo make install
      sudo chmod -R 777 $HOME/py-$version
      export PATH=$HOME/py-$version/bin:$PATH
      sudo ln -s $HOME/py-$version/bin/python3 $HOME/py-$version/bin/python
      echo '##vso[task.prependpath]'$HOME/py-$version/bin
    displayName: 'Setup python to run with sqlite on 3.*'
    condition: and(succeeded(), eq('${{ parameters.sqlite }}', 'true'), not(eq('${{ parameters.PythonVersion }}', '')), not(eq('${{ parameters.PythonVersion }}', '2.7')), eq(variables['Agent.Os'], 'Linux'))

  - task: Npm@1
    displayName: 'Use NPM $(NpmVersion)'
    inputs:
      command: custom
      verbose: true
      customCommand: 'install -g npm@$(NpmVersion)'

  # In the past installs of npm, node-pre-gyp 0.12.0 was installed.
  # However in the latest versions, 0.11.0 is getting isntalled.
  # - bash: |
  #     npm uninstall canvas
  #     npm i -g node-pre-gyp@0.12.0
  #     npm i -D node-pre-gyp@0.12.0
  #     npm install -D canvas --build-from-source
  #   displayName: 'Uninstall canvas and install build from source (only for Linux)'
  #   condition: and(succeeded(), eq(variables['Agent.Os'], 'Linux'))

  # See the help here on how to cache npm
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops#nodejsnpm
  - task: CacheBeta@0
    inputs:
      key: npm | $(Agent.OS) | package-lock.json
      path: $(npm_config_cache)
      restoreKeys: |
        npm | $(Agent.OS)
      displayName: Cache npm

  - task: Npm@1
    displayName: 'npm ci'
    inputs:
      workingDir: ${{ parameters.workingDirectory }}
      command: custom
      verbose: true
      customCommand: ci

  # On Mac, the command `node` doesn't always point to the current node version.
  # Debugger tests use the variable process.env.NODE_PATH
  - script: |
      export NODE_PATH=`which node`
      echo $NODE_PATH
      echo '##vso[task.setvariable variable=NODE_PATH]'$NODE_PATH
    displayName: 'Setup NODE_PATH for extension (Debugger Tests)'
    condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

  # Install vsce
  - bash: |
      npm install -g vsce
    displayName: 'Install vsce'
    condition: and(succeeded(), eq('${{ parameters.installVSCEorNPX }}', 'true'))

  - bash: npx tsc -p ./
    displayName: 'compile (npx tsc -p ./)'
    workingDirectory: ${{ parameters.workingDirectory }}
    condition: and(succeeded(), eq('${{ parameters.compile }}', 'true'))

  # https://code.visualstudio.com/api/working-with-extensions/continuous-integration#azure-pipelines
  - bash: |
      set -e
      /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
      disown -ar
    displayName: 'Start Display Server (xvfb) to launch VS Code)'
    condition: and(succeeded(), eq(variables['Agent.Os'], 'Linux'))

  - bash: python -m pip install -U pip
    displayName: 'Install pip'
  # # Show all versions installed/available on PATH if in verbose mode.
  # # Example command line (windows pwsh):
  # # > Write-Host Node ver: $(& node -v) NPM Ver: $(& npm -v) Python ver: $(& python --version)"
  # - bash: |
  #     echo AVAILABLE DEPENDENCY VERSIONS
  #     echo Node Version = `node -v`
  #     echo NPM Version = `npm -v`
  #     echo Python Version = `python --version`
  #     echo Gulp Version = `gulp --version`
  #   condition: and(succeeded(), eq(variables['system.debug'], 'true'))
  #   displayName: Show Dependency Versions

  - bash: |
      az login
      az storage blob download --file $(VSIX_NAME_JUPYTER) --account-name pvsc --container-name extension-builds-jupyter --name $(VSIX_NAME_JUPYTER)
    displayName: 'Download Jupyter VSIX'